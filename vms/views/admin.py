from flask import Blueprint, render_template, request, jsonify, current_app
from .check_auth import token_required
import socket
import ssl
import os
from bson.objectid import ObjectId
from bson.errors import InvalidId
import re
from datetime import datetime

bp = Blueprint('admin', __name__, url_prefix='/admin')

@bp.route('/')
@token_required
def admin(current_user):
    # TODO: client connecting info modify function
    return render_template("admin.html")

@bp.route('/load_agents')
def load_agents():
    #TODO: View connecting agnets
    #1. View all connecting agents OK
    #2. Add pagenation function OK
    #3. insert last scan info 
    #4. config button link OK
    #5. Add script run button
    page = request.args.get('page', 1, type=int)
    per_page = 10  # 한 페이지에 표시될 데이터의 개수
    total_agents = current_app.db.agents.count_documents({})
    total_pages = (total_agents // per_page) + (1 if total_agents % per_page != 0 else 0)

    agents_info = current_app.db.agents.find().skip((page-1)*per_page).limit(per_page)
    return render_template('connect_agent.html', agents=agents_info, total_pages=total_pages, current_page=page)

@bp.route('load_script')
def load_script():
    base_path = "Vulnerability_Check_Script"
    os_types = ["CentOS", "Fedora", "Rocky", "Ubuntu"]

    scripts = {}

    for os_type in os_types:
        file_paths = [os.path.join(base_path, os_type, f) for f in os.listdir(os.path.join(base_path, os_type))]
        
        file_data = [{
            'name': os.path.basename(f), 
            'size': os.path.getsize(f),
            'last_modified': datetime.fromtimestamp(os.path.getmtime(f)).strftime('%Y-%m-%d %H:%M:%S')
        } for f in file_paths]

        # sort last_modify
        sorted_data = sorted(file_data, key=lambda x: x['last_modified'], reverse=True)
        scripts[os_type] = sorted_data

    return render_template('script_manager.html', scripts=scripts)


@bp.route('/loadC')
def load_c():
    return render_template('c_content.html')