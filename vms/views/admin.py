from flask import Blueprint, render_template, request, jsonify, current_app
import socket
import ssl
import os

bp = Blueprint('admin', __name__, url_prefix='/admin')

@bp.route('/')
def admin():


    # TODO: client connecting info modify function
    return render_template("admin.html")

@bp.route('/api/agent_connect', methods=['POST']) 
def agent_connect():
    #TODO: server and client connecting functin
    #1. Get connecting info: OK
    #2. Connecting Test: OK
    #3. Connect Successful
    #3.1. mongo DB insert
    #3.2. return Successful
    #4. Connect Fail: OK
    #4.1. return Fail: OK
    remote_name = request.form.get('server_name')
    remote_ip = request.form.get('server_ip')
    remote_port = 13469

    current_app.logger.info("Received server_name: %s", remote_name)
    current_app.logger.info("Received server_ip: %s", remote_ip)

    context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
    try:
        BASE_DIR = os.path.dirname(os.path.abspath(__file__))  # This gets the directory of the currently executing script
        CERT_PATH = os.path.join(BASE_DIR, '../secure_shell_key/cert.pem')
        context.load_verify_locations(CERT_PATH)
    except Exception as e:
        current_app.logger.error(f"Error loading cert file: {e}")
        return jsonify({"result" : "fail", "message" : "Error loading cert file"})



    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            secure_socket = context.wrap_socket(s)
            secure_socket.connect((remote_ip, remote_port))
            secure_socket.sendall(b'CONNECT_TEST')
            data = secure_socket.recv(1024)
            current_app.logger.info("Received: %s",data.decode('utf-8'))
    except Exception as e:
        current_app.logger.error(f"Error connect fail: {e}")
        return jsonify({"result" : "fail", "message" : "Error connect fail"})


    if data.decode('utf-8') == 'CONNECT_SUCCESSFUL':
        return jsonify({"result": "success","message": "Connecting Successful"})
    else:
        return jsonify({"result": "fail", "message": "Connecting Fail"})
