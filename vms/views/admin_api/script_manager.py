from flask import Blueprint, request, jsonify, current_app
import os
import re
from datetime import datetime

bp = Blueprint('script_manager', __name__, url_prefix='/admin/api/agent_manager/')


@bp.route('get_script', methods=['GET'])
def get_script_content():
    os_type = request.args.get('os_type')
    script_name = request.args.get('script_name')

    # script path setting
    script_path = os.path.join('Vulnerability_Check_Script', os_type, script_name)

    try:
        # read script file
        with open(script_path, 'r') as file:
            content = file.read()
        
        # return script content
        return content

    except FileNotFoundError:
        return jsonify({"error": "Script not found"}), 404

    except Exception as e:
        return jsonify({"error": str(e)}), 500

@bp.route('save_script', methods=['POST'])
def save_script():
    try:
        os_type = request.form.get('os_type')
        script_name = request.form.get('script_name')
        content = request.form.get('content')

        # delete datetime info
        script_name = re.sub(r"_\d{14}\.sh$", ".sh", script_name)

        # add now time
        current_time = datetime.now().strftime('%Y%m%d%H%M%S')
        new_script_name = f"{script_name.rsplit('.', 1)[0]}_{current_time}.sh"

        base_path = "Vulnerability_Check_Script"
        script_path = os.path.join(base_path, os_type, new_script_name)
        current_app.logger.debug("script_path: %s",script_path)

        # script save
        try:
            with open(script_path, 'w') as f:
                f.write(content)
        except Exception as e:
            current_app.logger.error(f"Error writing to file: {script_path}. Error: {str(e)}")
            return jsonify(result="fail", message=f"Error: {str(e)}"), 500

        return jsonify(result="success", message="Script saved successfully!"), 200

    except Exception as e:
        return jsonify(result="fail", message=f"Error: {str(e)}"), 500

@bp.route('rename_script', methods=['POST'])
def rename_script():
    base_path = "Vulnerability_Check_Script"
    
    # Get data from the request
    os_type = request.form.get('os_type')
    old_script_name = request.form.get('old_script_name')
    new_script_name = request.form.get('new_script_name')
    
    # Check if the new script name has the correct format
    if not new_script_name.endswith('.sh') or '/' in new_script_name:
        return jsonify(result="error", message="Invalid script name. Script name should end with '.sh' and should not contain '/'."), 400

    # Paths for the old and new script
    old_script_path = os.path.join(base_path, os_type, old_script_name)
    new_script_path = os.path.join(base_path, os_type, new_script_name)
    
    try:
        # Check if the old script exists
        if not os.path.exists(old_script_path):
            return jsonify(result="error", message=f"Script '{old_script_name}' does not exist."), 404
        
        # Check if a script with the new name already exists
        if os.path.exists(new_script_path):
            return jsonify(result="error", message=f"A script with the name '{new_script_name}' already exists."), 400
        
        # Rename the script
        os.rename(old_script_path, new_script_path)
        
        return jsonify(result="success", message=f"Script '{old_script_name}' renamed to '{new_script_name}' successfully.")
    
    except Exception as e:
        # Handle any other unforeseen errors
        return jsonify(result="error", message=str(e)), 500


@bp.route('delete_script', methods=['POST'])
def delete_script():
    base_path = "Vulnerability_Check_Script"
    
    # Get data from the request
    os_type = request.form.get('os_type')
    script_name = request.form.get('script_name')

    # Build and normalize the script path
    script_path = os.path.normpath(os.path.join(base_path, os_type, script_name))
    
    # Validate that the path is still within the base directory
    if not os.path.commonprefix([script_path, base_path]) == base_path:
        return jsonify(result="error", message="Invalid file path."), 400

    try:
        # Check if the script exists
        if not os.path.exists(script_path):
            return jsonify(result="error", message=f"Script '{script_name}' does not exist."), 404
        
        # Delete the script
        os.remove(script_path)
        
        return jsonify(result="success", message=f"Script '{script_name}' deleted successfully.")
    
    except Exception as e:
        # Handle any other unforeseen errors
        return jsonify(result="error", message=str(e)), 500