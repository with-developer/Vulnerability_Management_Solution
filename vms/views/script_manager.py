from flask import Blueprint, render_template, request, jsonify, current_app
from .api.check_auth import token_required
import os
from datetime import datetime
import hashlib

bp = Blueprint('script_manager', __name__, url_prefix='/script_manager')

@bp.route('/')
@token_required
def script_manager(current_user):
    base_path = "Vulnerability_Check_Script"
    os_types = ["CentOS", "Fedora", "Rocky", "Ubuntu"]

    scripts = {}

    for os_type in os_types:
        file_paths = [os.path.join(base_path, os_type, f) for f in os.listdir(os.path.join(base_path, os_type))]
        
        file_data = []
        for f in file_paths:
            with open(f, 'rb') as file:
                file_content = file.read()
                md5_hash = hashlib.md5(file_content).hexdigest()  # 파일의 MD5 해시 값을 계산합니다.

            file_data.append({
                'name': os.path.basename(f), 
                'size': os.path.getsize(f),
                'last_modified': datetime.fromtimestamp(os.path.getmtime(f)).strftime('%Y-%m-%d %H:%M:%S'),
                'md5': md5_hash  # MD5 해시 값을 추가합니다.
            })

        # sort last_modify
        sorted_data = sorted(file_data, key=lambda x: x['last_modified'], reverse=True)
        scripts[os_type] = sorted_data

    # MongoDB에서 모든 정책 정보 가져오기
    policies = list(current_app.db.policy.find({}, {"_id": 0}))

    return render_template('script_manager.html', scripts=scripts, policies=policies)
