function activateScriptEditorTab() {
    $("#script-editor-tab").tab("show"); // Bootstrap 탭을 활성화하는 메서드
}

document.addEventListener("DOMContentLoaded", function () {
    // URL에서 파라미터 가져오기
    const urlParams = new URLSearchParams(window.location.search);

    // os_type과 script_name 파라미터 가져오기
    const osTypeParam = urlParams.get("os_type");
    const scriptNameParam = urlParams.get("script_name");
    const scriptEditorParam = urlParams.get("script_editor");

    // script_editor 파라미터가 true인 경우 Script Editor 탭 활성화
    if (scriptEditorParam === "true") {
        activateScriptEditorTab();
    }

    // 파라미터가 있는 경우 스크립트 로드
    if (osTypeParam && scriptNameParam) {
        osType = osTypeParam; // 전역 변수에 값을 할당
        scriptName = scriptNameParam; // 전역 변수에 값을 할당
        document.getElementById(
            "currentFileName"
        ).textContent = `/${osType}/${scriptName}`;

        updateCurrentPath();

        // API 호출을 사용하여 스크립트 내용 가져오기
        $.get(
            `/api/get_script_content_policy_num?os_type=${osType}&file_name=${scriptName}&policy_num=${policyNum}`,
            function (response) {
                // 스크립트 내용을 Monaco editor에 로드
                if (response.result === "success") {
                    editor.setValue(response.data);
                } else {
                    alert("Error loading the script: " + response.message);
                }
            }
        ).fail(function () {
            alert("Error loading the script.");
        });
    }

    // script_editor 파라미터가 있는 경우 해당 탭 선택
    if (scriptEditorParam && scriptEditorParam.toLowerCase() === "true") {
        const scriptEditorTab = document.getElementById("script-editor-tab");
        const scriptManagerTab = document.getElementById("script-manager-tab");
        const scriptEditorContent = document.getElementById("script-editor");
        const scriptManagerContent = document.getElementById("script-manager");

        scriptEditorTab.classList.add("active");
        scriptManagerTab.classList.remove("active");
        scriptEditorContent.classList.add("show", "active");
        scriptManagerContent.classList.remove("show", "active");
    }
});

let editor;
let policyNum = undefined;
let osType;
let scriptName;
let policyCategory;
let policyName;

function updateCurrentPath() {
    let path = "Select a file from the explorer";

    if (osType && scriptName) {
        if (policyNum) {
            path = `/${osType}/${scriptName}/${policyCategory}/${policyNum}. ${policyName}`;
        } else {
            path = `/${osType}/${scriptName}/All Policies`;
        }
    }

    document.getElementById("currentPath").textContent = path;
}

require.config({
    paths: {
        vs: "https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.41.0/min/vs",
    },
});
require(["vs/editor/editor.main"], function () {
    editor = monaco.editor.create(document.getElementById("monacoEditor"), {
        value:
            "#!/bin/bash\n\n#In the left tab, select File, Policy.\n#If you do not set a policy, all items are printed.",
        language: "shell",
        theme: "tomorrow",
        vertical: "auto",
        horizontal: "auto",
        verticalScrollbarSize: 10,
        horizontalScrollbarSize: 10,
        scrollBeyondLastLine: false, // 에디터상에서 스크롤이 가능하게
        readOnly: false, // 수정 가능 여부
        automaticLayout: true, // 부모 div 크기에 맞춰서 자동으로 editor 크기 맞춰줌

        fontSize: 14,
        minimap: {
            enabled: true, // 우측 스크롤 미니맵
        },
        lineHeight: 19,
    });
    let parent = document.getElementById("monacoEditor").parentElement;
    console.log(parent.clientWidth);

    // Initialize on page load
    populateFileExplorer();

    $(document).on("show.bs.collapse", ".collapse", function () {
        const arrowIcon = this.previousElementSibling.querySelector(".arrow-icon");
        if (arrowIcon) {
            arrowIcon.classList.remove("uil-angle-right");
            arrowIcon.classList.add("uil-angle-down");
        }
    });

    $(document).on("hide.bs.collapse", ".collapse", function () {
        const arrowIcon = this.previousElementSibling.querySelector(".arrow-icon");
        if (arrowIcon) {
            arrowIcon.classList.remove("uil-angle-down");
            arrowIcon.classList.add("uil-angle-right");
        }
    });
});
document.querySelectorAll(".file-name-link").forEach((link) => {
    link.addEventListener("click", function (e) {
        e.preventDefault();
        policyNum = e.target.dataset.policyNum;
        policyName = e.target.textContent.split(".")[2].trim();
        policyCategory = e.target
            .closest(".collapse")
            .previousElementSibling.textContent.trim();

        console.log(policyNum);
        console.log(osType);
        console.log(scriptName);

        // osType과 scriptName이 모두 값이 있을 때만 API 호출
        if (osType && scriptName) {
            document.getElementById(
                "currentFileName"
            ).textContent = `/${osType}/${scriptName}`;

            updateCurrentPath();

            // 2. API 호출을 사용하여 스크립트 내용 가져오기
            $.get(
                `/api/get_script_content_policy_num?os_type=${osType}&file_name=${scriptName}&policy_num=${policyNum}`,
                function (response) {
                    // 3. 스크립트 내용을 Monaco editor에 로드
                    if (response.result === "success") {
                        editor.setValue(response.data);
                    } else {
                        alert("Error loading the script: " + response.message);
                    }
                }
            ).fail(function () {
                alert("Error loading the script.");
            });
        }
    });
});

document.addEventListener("DOMContentLoaded", function () {
    // Reset PolicyNum 버튼 클릭 이벤트 처리
    document.getElementById("resetPolicyNum").addEventListener("click", function () {
        policyNum = undefined;
        policyName = undefined;
        policyCategory = undefined;
        updateCurrentPath();

        // 2. API 호출을 사용하여 스크립트 내용 가져오기
        $.get(
            `/api/get_script_content_policy_num?os_type=${osType}&file_name=${scriptName}&policy_num=${policyNum}`,
            function (response) {
                // 3. 스크립트 내용을 Monaco editor에 로드
                if (response.result === "success") {
                    editor.setValue(response.data);
                } else {
                    alert("Error loading the script: " + response.message);
                }
            }
        ).fail(function () {
            alert("Error loading the script.");
        });
    });
});


document.getElementById("save").addEventListener("click", function () {
    Swal.fire({
        title: "Are you sure?",
        text: "Do you want to save the current script?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes, Save it!",
        cancelButtonText: "No, cancel!",
        reverseButtons: true,
    }).then((result) => {
        if (result.isConfirmed) {
            const content = editor.getValue();
            $.post(
                "/api/save_script",
                {
                    content: content,
                    os_type: osType,
                    script_name: scriptName,
                    option: "save",
                    new_script_name: "undefined",
                    policyNum: policyNum,
                },
                function (response) {
                    if (response.result === "success") {
                        Swal.fire("Saved!", "Your script has been saved.", "success");
                        if (response.new_script_name) {
                            scriptName = response.new_script_name; // 스크립트 이름 업데이트
                        }

                        populateFileExplorer();
                    } else {
                        Swal.fire(
                            "Error!",
                            "Error saving the script: " + response.message,
                            "error"
                        );
                    }
                }
            ).fail(function () {
                Swal.fire("Error!", "Error saving the script.", "error");
            });
        } else if (result.dismiss === Swal.DismissReason.cancel) {
            Swal.fire("Cancelled", "Your script is not saved", "error");
        }
    });
});
document.getElementById("save-as").addEventListener("click", function () {
    // 사용자에게 새로운 파일명을 입력받습니다.
    Swal.fire({
        title: "Enter new file name",
        input: "text",
        inputAttributes: {
            autocapitalize: "off",
        },
        showCancelButton: true,
        confirmButtonText: "Next",
        showLoaderOnConfirm: true,
        preConfirm: (newFileName) => {
            // 사용자가 새 파일명을 입력하면, 변경할 것인지 확인하는 모달을 표시합니다.
            return Swal.fire({
                title: "Are you sure?",
                text: `Do you want to save as "${newFileName}"?`,
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, Save it!",
                cancelButtonText: "No, cancel!",
                reverseButtons: true,
            }).then((result) => {
                if (result.isConfirmed) {
                    // 사용자가 변경을 확인하면, 서버에 저장 요청을 보냅니다.
                    const content = editor.getValue();
                    $.post(
                        "/api/save_script",
                        {
                            content: content,
                            os_type: osType,
                            script_name: scriptName,
                            option: "save_as",
                            new_script_name: newFileName,
                            policyNum: policyNum,
                        },
                        function (response) {
                            if (response.result === "success") {
                                Swal.fire(
                                    "Saved!",
                                    "Your script has been saved with new name.",
                                    "success"
                                );
                                scriptName = newFileName; // 스크립트 이름 업데이트
                                populateFileExplorer();
                            } else {
                                Swal.fire(
                                    "Error!",
                                    "Error saving the script: " + response.message,
                                    "error"
                                );
                            }
                        }
                    ).fail(function () {
                        Swal.fire("Error!", "Error saving the script.", "error");
                    });
                } else if (result.dismiss === Swal.DismissReason.cancel) {
                    Swal.fire(
                        "Cancelled",
                        "Your script is not saved with new name",
                        "error"
                    );
                }
            });
        },
        allowOutsideClick: () => !Swal.isLoading(),
    });
});

function populateFileExplorer() {
    $.ajax({
        type: "GET",
        url: "/api/get_script_filename",
        success: function (response) {
            if (response.result === "success") {
                const accordion = document.getElementById("fileAccordion");
                accordion.innerHTML = "";
                const scripts = response.data;
                let osTypeCounter = 0;

                for (const osTypeName in scripts) {
                    osTypeCounter++;

                    const card = document.createElement("div");
                    const cardHeader = document.createElement("div");

                    const btn = document.createElement("button");
                    const arrowIcon = document.createElement("i");
                    arrowIcon.className = "arrow-icon uil uil-angle-right";
                    btn.appendChild(arrowIcon);

                    btn.className = "btn btn-block text-left os-type-button"; // Added class for OS type
                    btn.type = "button";
                    btn.setAttribute("data-bs-toggle", "collapse");
                    btn.setAttribute("data-bs-target", `#collapse${osTypeCounter}`);

                    // 아이콘 추가
                    const icon = document.createElement("i");
                    icon.className = "uil uil-folder";
                    btn.appendChild(icon); // Add the icon to the button

                    // Add a space between the icon and the OS name
                    const space = document.createTextNode(" ");
                    btn.appendChild(space);

                    // Add the OS name
                    btn.appendChild(document.createTextNode(osTypeName));

                    cardHeader.appendChild(btn);
                    card.appendChild(cardHeader);

                    const collapse = document.createElement("div");
                    collapse.id = `collapse${osTypeCounter}`;
                    collapse.className = "collapse";
                    collapse.setAttribute("data-parent", "#fileAccordion");

                    const cardBody = document.createElement("div");
                    cardBody.className = "card-body";

                    const ul = document.createElement("ul");

                    scripts[osTypeName].forEach((file) => {
                        const li = document.createElement("li");
                        const a = document.createElement("a");
                        a.href = "#";
                        a.className = "file-name-link"; // Added class for file name

                        // Terminal SVG icon 추가
                        const fileIcon = document.createElementNS(
                            "http://www.w3.org/2000/svg",
                            "svg"
                        );
                        fileIcon.setAttribute("viewBox", "0 0 16 16");
                        fileIcon.setAttribute("width", "14");
                        fileIcon.setAttribute("height", "14");

                        const path = document.createElementNS(
                            "http://www.w3.org/2000/svg",
                            "path"
                        );
                        path.setAttribute(
                            "d",
                            "M0 2.75C0 1.784.784 1 1.75 1h12.5c.966 0 1.75.784 1.75 1.75v10.5A1.75 1.75 0 0 1 14.25 15H1.75A1.75 1.75 0 0 1 0 13.25Zm1.75-.25a.25.25 0 0 0-.25.25v10.5c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25V2.75a.25.25 0 0 0-.25-.25ZM7.25 8a.749.749 0 0 1-.22.53l-2.25 2.25a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734L5.44 8 3.72 6.28a.749.749 0 0 1 .326-1.275.749.749 0 0 1 .734.215l2.25 2.25c.141.14.22.331.22.53Zm1.5 1.5h3a.75.75 0 0 1 0 1.5h-3a.75.75 0 0 1 0-1.5Z"
                        );

                        fileIcon.appendChild(path);
                        a.appendChild(fileIcon); // Add the terminal SVG icon to the link

                        // Add a space between the icon and the file name
                        const fileSpace = document.createTextNode(" ");
                        a.appendChild(fileSpace);

                        // Add the file name
                        a.appendChild(document.createTextNode(file.name));

                        a.dataset.osType = osTypeName;

                        a.addEventListener("click", function (e) {
                            e.preventDefault();
                            osType = e.target.dataset.osType; // 전역 변수에 값을 할당
                            scriptName = e.target.textContent.trim(); // 전역 변수에 값을 할당
                            document.getElementById(
                                "currentFileName"
                            ).textContent = `/${osType}/${scriptName}`;

                            updateCurrentPath();

                            // 2. API 호출을 사용하여 스크립트 내용 가져오기
                            $.get(
                                `/api/get_script_content_policy_num?os_type=${osType}&file_name=${scriptName}&policy_num=${policyNum}`,
                                function (response) {
                                    // 3. 스크립트 내용을 Monaco editor에 로드
                                    if (response.result === "success") {
                                        editor.setValue(response.data);
                                    } else {
                                        alert("Error loading the script: " + response.message);
                                    }
                                }
                            ).fail(function () {
                                alert("Error loading the script.");
                            });
                        });

                        li.appendChild(a);
                        ul.appendChild(li);
                    });

                    cardBody.appendChild(ul);
                    collapse.appendChild(cardBody);
                    card.appendChild(collapse);
                    accordion.appendChild(card);
                }
            } else {
                alert(response.message);
            }
        },
        // ... (the rest of your AJAX error handling and other codes)
    });
}

$(document).ready(function () {
    $(".view-script").click(function (e) {
        e.preventDefault();

        // Get file path from the `data-*` attributes
        var osType = $(this).data("os-type");
        var scriptName = $(this).data("script-name");

        // Redirect to the script_manager page with the relevant parameters
        window.location.href =
            "/script_manager/?os_type=" +
            osType +
            "&script_name=" +
            scriptName +
            "&script_editor=true";
    });
});
$(document).ready(function () {
    $(".edit-script").click(function (e) {
        e.preventDefault();

        // Get file path from the `data-*` attributes
        var osType = $(this).data("os-type");
        var scriptName = $(this).data("script-name");

        // Redirect to the script_manager page with the relevant parameters
        window.location.href =
            "/script_manager/?os_type=" +
            osType +
            "&script_name=" +
            scriptName +
            "&script_editor=true";
    });
});

$(document).ready(function () {
    let renameOsType = "";
    let renameScriptName = "";

    $(".rename-script").click(function (e) {
        e.preventDefault();

        // Get current script information from the `data-*` attributes
        renameOsType = $(this).data("os-type");
        renameScriptName = $(this).data("script-name");

        // Show the rename modal
        $("#newScriptName").val(renameScriptName); // Set current script name as default
        $("#renameModal").modal("show");
    });

    $("#renameSaveButton").click(function () {
        let newScriptName = $("#newScriptName").val();

        if (newScriptName.trim() === "") {
            alert("Script name cannot be empty.");
            return;
        }

        // AJAX request to rename the script
        $.ajax({
            type: "POST",
            url: "/api/rename_script",
            data: {
                os_type: renameOsType,
                old_script_name: renameScriptName,
                new_script_name: newScriptName,
            },
            success: function (response) {
                if (response.result === "success") {
                    $("#renameModal").modal("hide");
                    Swal.fire({
                        icon: "success",
                        title: "Renamed!",
                        text: response.message,
                    }).then(function () {
                        location.href = '/script_manager';
                    });
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: response.message,
                    });
                }
            },
            error: function (error) {
                Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "Error renaming script.",
                });
            },
        });
    });
});

$(document).ready(function () {
    $(".delete-script").click(function (e) {
        e.preventDefault();

        // Get file path from the `data-*` attributes
        var osType = $(this).data("os-type");
        var scriptName = $(this).data("script-name");

        Swal.fire({
            title: "Are you sure?",
            text: `Do you want to delete '${scriptName}'?`,
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Yes, delete it!",
            cancelButtonText: "No, keep it",
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    type: "POST",
                    url: "/api/delete_script",
                    data: {
                        os_type: osType,
                        script_name: scriptName,
                    },
                    success: function (response) {
                        if (response.result === "success") {
                            Swal.fire({
                                icon: "success",
                                title: "Deleted!",
                                text: response.message,
                            }).then(function () {
                                location.href = '/script_manager';
                            });
                        } else {
                            Swal.fire({
                                icon: "error",
                                title: "Oops...",
                                text: response.message,
                            });
                        }
                    },
                    error: function (error) {
                        Swal.fire({
                            icon: "error",
                            title: "Oops...",
                            text: "Error deleting script.",
                        });
                    },
                });
            }
        });
    });
});
