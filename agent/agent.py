import socket
import subprocess
import ssl
import os
import re
import time


HOST = '0.0.0.0'
PORT = 13469

def result_file_parser(result_file):
    try:
        with open(result_file, "r", encoding="utf-8") as file:
            content = file.readlines()

            # Regular expression patterns
            item_pattern = re.compile(r'(\d+\.\d+)')
            result_pattern = re.compile(r'(취약|양호|N/A)')

            # Initialize an empty list to store the dictionaries
            results = []

            # Iterate over the content lines
            i = 0
            while i < len(content):
                line = content[i].strip()
                
                # Check for the pattern ▶ ... ◀ to identify the item
                if line.startswith('▶') and line.endswith('◀'):
                    item_dict = {}
                    
                    # Extract the item information
                    item_match = item_pattern.search(line)
                    if item_match:
                        item_dict['category'] = item_match.group(1)
                    
                    # Skip the lines of "양호 판단 기준" until we reach the result line
                    while not content[i].strip().startswith('※'):
                        i += 1

                    # Extract the result (e.g. 양호, 취약, N/A)
                    result_match = result_pattern.search(content[i])
                    if result_match:
                        item_dict['diagnostic_results'] = result_match.group(1)
                    
                    # Extract additional comments
                    i += 1
                    if i < len(content):
                        comment = content[i].strip()
                        if comment and not comment.startswith('※'):
                            item_dict['comment'] = comment
                        else:
                            item_dict['comment'] = None
                    
                    results.append(item_dict)
                
                i += 1

        # Sort the results based on the '항목' field
        sorted_results = sorted(results, key=lambda x: [int(num) for num in x['category'].split('.')])

        return sorted_results

    except Exception as e:
        print(f"Error reading the result file: {e}")
        return []

    

def execute_script():
    try:
        result = subprocess.check_output(['./Vulnerability_scan.sh'], stderr=subprocess.STDOUT, shell=True)
        result_file = result.split()[2].decode('utf-8')
        result_data = result_file_parser(result_file)
        return str(result_data).encode('utf-8').decode('utf-8')
    except Exception as e:
        print(f"Error executing the script: {e}")
        return 'Script execution failed.'

def get_info():
    try:
        result = subprocess.check_output(['cat', '/etc/os-release'], stderr=subprocess.STDOUT)
        return result.decode('utf-8')
    except subprocess.CalledProcessError:
        return 'unknown'
    
def save_received_file(secure_conn):
    file_name = "Vulnerability_scan.sh"
    try:
        file_size = int(secure_conn.recv(1024).decode('utf-8'))
    except ValueError:
        print("Received invalid file size")
        return 'ERROR'

    secure_conn.sendall(b'READY')

    try:
        with open(file_name, 'wb') as f:
            total_received = 0
            while total_received < file_size:
                chunk = secure_conn.recv(4096)
                if not chunk:
                    break
                total_received += len(chunk)
                f.write(chunk)

        try:
            os.chmod(file_name, 0o755)
        except Exception as e:
            print(f"Error changing permissions of {file_name}: {e}")
            return 'ERROR'

        return 'SUCCESS'
    except Exception as e:
        print(f"Error while saving file: {e}")
        return 'ERROR'



def disconnect(secure_conn):
    response = 'DISCONNECT_OK'
    secure_conn.sendall(response.encode('utf-8'))
    print("[*] Disconnecting agent and shutting down.")
    secure_conn.close()
    exit(0)



##### Main Code Start #####

context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
try:
    context.load_cert_chain('cert.pem', 'key.pem')
except Exception as e:
    print(f"Error loading SSL certificates: {e}")
    exit(1)

while True:
    time.sleep(1)
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind((HOST, PORT))
            s.listen()
            print(f"[*] Listening on {HOST}:{PORT}")

            while True:
                conn, addr = s.accept()
                with context.wrap_socket(conn, server_side=True) as secure_conn:
                    print(f"[+] Connected by {addr}")

                    try:
                        data = secure_conn.recv(1024)
                        command = data.decode('utf-8')
                    except (socket.error, UnicodeDecodeError) as e:
                        print(f"Error receiving or decoding data: {e}")
                        secure_conn.close()
                        continue

                    if not data:
                        secure_conn.close()
                        break

                    print(f"    Received command: {command}")

                    if command == 'RUN':
                        response = execute_script()
                        response_data = response.encode('utf-8')

                        # Send the size of the data
                        try:
                            secure_conn.sendall(str(len(response_data)).encode('utf-8'))
                        except socket.error as e:
                            print(f"Error sending data size: {e}")
                            secure_conn.close()
                            continue

                        # Wait for a Ready signal from Flask
                        try:
                            ready_signal = secure_conn.recv(1024)
                        except socket.error as e:
                            print(f"Error receiving Ready signal: {e}")
                            secure_conn.close()
                            continue

                        if ready_signal.decode('utf-8') == 'Ready':
                            try:
                                secure_conn.sendall(response_data)
                            except socket.error as e:
                                print(f"Error sending data: {e}")
                                secure_conn.close()
                    elif command == 'CONNECT_TEST':
                        response = 'CONNECT_SUCCESSFUL'
                        secure_conn.sendall(response.encode('utf-8'))
                    elif command == 'GET_INFO':
                        response = get_info()
                        secure_conn.sendall(response.encode('utf-8'))
                    elif command == 'SEND_SCRIPT':
                        response = save_received_file(secure_conn)
                        secure_conn.sendall(response.encode('utf-8'))

                    elif command == 'DISCONNECT':
                        disconnect(secure_conn)

                    print(f"[-] Disconnected by {addr}")

    except Exception as e:
        print(f"Error occurred: {e}")
